* list_work.rs

** explored doing Iterable.
   CLOCK: [2014-03-14 Fri 22:00]--[2014-03-14 Fri 22:08] =>  0:08
   without (static) existentials nor lifetimes in the Iterator trait
   params, seems impossible to encode right now.

** so lets just make two variants
   CLOCK: [2014-03-14 Fri 22:08]--[2014-03-14 Fri 22:14] =>  0:06

   * ah, noticed that the problem statement is actually find the last *box*,
     not the last *element*.  So the analogous thing in Rust land is slices.

   * so in fact there is no need for two variants.  And I am done with P01.

** P02
   CLOCK: [2014-03-14 Fri 22:14]--[2014-03-14 Fri 22:16] =>  0:02

** P03
   CLOCK: [2014-03-14 Fri 22:16]--[2014-03-14 Fri 22:21] =>  0:05

   * some sigil twiddling delayed this one.  Still not 100% happy with how
     I resolved those.

** P04
   CLOCK: [2014-03-14 Fri 22:21]--[2014-03-14 Fri 22:23] =>  0:02

** P05
   CLOCK: [2014-03-14 Fri 22:23]--[2014-03-14 Fri 22:28] =>  0:05

   * took longer than I expected, in part because our vec::reverse is
     an in-place reverse (which to be fair might have qualified in
     this problem) and in part because I wasted time trying to get one
     using slices to work which does not make sense unless the elem
     type A is also cloneable.

** P06
   CLOCK: [2014-03-14 Fri 22:28]--[2014-03-14 Fri 22:32] =>  0:04


** P07
   CLOCK: [2014-03-15 Sat 00:13]--[2014-03-15 Sat 00:24] =>  0:11
   CLOCK: [2014-03-14 Fri 22:32]--[2014-03-14 Fri 22:42] =>  0:10

   * Here is where things start to get interesting, we are now in the land
     of lists as trees.

   * Spent most of the time figuring out some quick Sexp enum definition;
     chose one that is either Atom of X (A) or List of owned ~[Sexp<X>] (L).

** P08
   CLOCK: [2014-03-15 Sat 07:51]--[2014-03-15 Sat 09:07] =>  1:16
   CLOCK: [2014-03-15 Sat 00:24]--[2014-03-15 Sat 00:41] =>  0:17

   * there was a trivial method using built-in methods, but I wanted to write
     this one out in preparation for P09 which seems harder.

   * redoing it again in terms of iter and skip_while

   * but no, it turns out the latter is not easy (skip_while returns a wrapping iterator,
     but all I really want to do is skip a bunch of entries on *this* iteration)

   * interestingly, even this does not work, because i have not figured out how
     to encode the fact that `pred` is only called during the execution of drop_while itself,
     and is not itself moved into the value returned by drop_while
     (perhaps unboxed closures?).

    ```
    fn drop_until<'a, X, I:Iterator<X>>(it: &mut I, pred: |&X| -> bool) -> Option<X> {
        let mut next = it.next();
        loop {
            match next {
                Some(ref val) if !pred(val) => {}
                _ => return next,
            }
            next = it.next();
        }
    }

    fn compress_iter<X:Eq,I:Iterator<X>>(mut it: I) -> ~[X] {
        let mut result = ~[];
        let mut v = it.next();
        'outer:
        loop {
            match v {
                None => return result,
                Some(val) => {
                    loop {
                        v = drop_until(&mut it, |v| v != &val);
                        result.push(val);
                    }
                }
            }
        }
    }
    ```

    * and this variant falls into the same trap.  (I am passing the Peekable by value
      because I cannot pass it by mut ref *and* borrow that reference multiple times within
      drop_while)

    fn drop_while<X, I:Iterator<X>>(mut it: Peekable<X, I>, pred: |&X| -> bool) -> Peekable<X, I> {
        loop {
            match it.peek() {
                None => break,
                Some(next) if !pred(next) => break,
                _ => {}
            }
            it.next();
        }
        it
    }

    fn compress_iter<X:Eq,I:Iterator<X>>(it: I) -> ~[X] {
        let mut result = ~[];
        let mut it = it.peekable();
        let mut v = it.next();
        'outer:
        loop {
            match v {
                None => return result,
                Some(val) => {
                    loop {
                        it = drop_while(it, |p| p == &val);
                        v = it.next();
                        result.push(val);
                    }
                }
            }
        }
    }

   * Finally made Iterator based variant that works and that I can stomch.
     It is about as long in LOC as the vector based one, but has no calls
     to unwrap and no reversing copy at the end.

** P09
   CLOCK: [2014-03-15 Sat 09:21]--[2014-03-15 Sat 09:29] =>  0:08
   CLOCK: [2014-03-15 Sat 09:07]--[2014-03-15 Sat 09:20] =>  0:13
   CLOCK: [2014-03-15 Sat 07:43]--[2014-03-15 Sat 07:51] =>  0:08

   * Working through the process of P08 made this one really fast going.

   * Making variant of it illustrating that not only do I honor
     move-semantics, but I also preserve relative ordering

** P10
   CLOCK: [2014-03-15 Sat 09:29]--[2014-03-15 Sat 09:33] =>  0:04

   * Super fast

** Getting tired of writing commas when transcribing tests, lets make a macro for that
   CLOCK: [2014-03-15 Sat 09:34]--[2014-03-15 Sat 10:21] =>  0:47

   * Went down big rat hole of trying to make an sexp! macro.
     I cannot figure out how to get the macro parser to handle something
     that free-form, though.

** P11
   CLOCK: [2014-03-15 Sat 10:22]--[2014-03-15 Sat 10:27] =>  0:05

   * This exercise is of somewhat less value in the context of Rust,
     since the space saved by dropping the associated count is
     offset by the space spent on an enum tag.

   * Maybe for sub-word sized values it will eventually make sense,
     maybe should check whether such support is already in place.
     No, even then its dumb, unless you also ~-allocate the
     (Count, Payload) tuple.

** P12
   CLOCK: [2014-03-15 Sat 10:28]--[2014-03-15 Sat 10:34] =>  0:06

** P13
   CLOCK: [2014-03-15 Sat 10:41]--[2014-03-15 Sat 10:54] =>  0:13
   CLOCK: [2014-03-15 Sat 10:34]--[2014-03-15 Sat 10:35] =>  0:01

** Seeing if I can simplify either or both of P09 and P13
   CLOCK: [2014-03-15 Sat 10:55]--[2014-03-15 Sat 11:09] =>  0:14

   * this is after reflecting on whether nested loops are needed

** P14
   CLOCK: [2014-03-15 Sat 11:09]--[2014-03-15 Sat 11:12] =>  0:03

** P15
   CLOCK: [2014-03-15 Sat 11:12]--[2014-03-15 Sat 11:19] =>  0:07

** Making Iterator that returns a given element K times
   CLOCK: [2014-03-15 Sat 11:19]--[2014-03-15 Sat 11:20] =>  0:01

   * actually, range().map(..) would probably serve just fine here.

   * eh, it does not, because we do not have unboxed closures, and so
     I cannot put the elem cloning closure into the IotaIter (which
     needs to own the closure so it can be invoked later)

** Refactoring earlier code to use iter::Unfold instead of building intermediate vecs.
   CLOCK: [2014-03-15 Sat 11:21]--[2014-03-15 Sat 11:40] =>  0:19

** P16
   CLOCK: [2014-03-15 Sat 11:40]--[2014-03-15 Sat 12:00] =>  0:20

   * some of this time was spent dealing with fallout of introducing the rest of
     the lowercase alphabet as static constant symbols

** P17
   CLOCK: [2014-03-15 Sat 12:00]--[2014-03-15 Sat 12:13] =>  0:13

   * trickier than I expected, in part because while we have easy ways
     to index-split slices, and easy ways to partition owned vecs
     based on an element predicate, we do not have an easy way to
     partition owned vecs based on indexes.

   * any chance that the vec::chunks method could possibly help here?  Not clear.

** P18
   CLOCK: [2014-03-15 Sat 12:17]--[2014-03-15 Sat 12:22] =>  0:05

** P19
   CLOCK: [2014-03-15 Sat 12:22]--[2014-03-15 Sat 12:27] =>  0:05

** P20
   CLOCK: [2014-03-15 Sat 12:27]--[2014-03-15 Sat 12:29] =>  0:02

** P21
   CLOCK: [2014-03-15 Sat 12:29]--[2014-03-15 Sat 12:32] =>  0:03

** P22
   CLOCK: [2014-03-15 Sat 12:32]--[2014-03-15 Sat 12:34] =>  0:02

** P23
   CLOCK: [2014-03-15 Sat 12:35]--[2014-03-15 Sat 12:51] =>  0:16

** P24
   CLOCK: [2014-03-15 Sat 12:51]--[2014-03-15 Sat 13:02] =>  0:11

** P25
   CLOCK: [2014-03-15 Sat 13:02]--[2014-03-15 Sat 13:11] =>  0:09

** P26
   CLOCK: [2014-03-16 Sun 07:24]--[2014-03-16 Sun 07:41] =>  0:17
   CLOCK: [2014-03-15 Sat 14:07]--[2014-03-15 Sat 14:12] =>  0:05
   CLOCK: [2014-03-15 Sat 13:51]--[2014-03-15 Sat 13:59] =>  0:08
   CLOCK: [2014-03-15 Sat 13:11]--[2014-03-15 Sat 13:19] =>  0:08

   * more stymied by this one, classic failure to reconsider the base
     case handling after I later decided to change the structure of
     the recursion

   * (plus I made the classic error of not seeing the two recursive
     cases, re_add and no_add, up front)

** P27
   CLOCK: [2014-03-16 Sun 09:25]--[2014-03-16 Sun 09:59] =>  0:32
   CLOCK: [2014-03-16 Sun 09:00]--[2014-03-16 Sun 09:25] =>  0:25
   CLOCK: [2014-03-16 Sun 08:41]--[2014-03-16 Sun 09:00] =>  0:19
   CLOCK: [2014-03-16 Sun 07:41]--[2014-03-16 Sun 08:41] =>  1:00

   * Spent an hour on this one, the large bulk of the time spent attempting to
     write the test data for the first function by hand.  But that was dumb.
     Lets get smart.

   * Well, getting "smart" now means that I do have a test that passes, but the
     whole thing runs quite noticeably slow.

   * So I hard-coded a cut-and-pasted version of the naive-algorithm's
     output (post sorting).

   * ready to move on to part b now

   * part b took less time than part a, in part because I largely
     copied the logic from part a.  More time was then spent trying to
     figure out a test failure (answer: my manually entered test data
     was flawed).

** P28
   CLOCK: [2014-03-16 Sun 10:13]--[2014-03-16 Sun 10:23] =>  0:10
   CLOCK: [2014-03-16 Sun 09:59]--[2014-03-16 Sun 10:13] =>  0:14

   * Once again, the hard part of part a was getting the test to run
     properly (14 min for part a).

   * And part b took even less time, despite being slightly more involved
     w.r.t. implementation.

* arithmetic
** P31
   CLOCK: [2014-03-16 Sun 10:46]--[2014-03-16 Sun 10:46] =>  0:00
   CLOCK: [2014-03-16 Sun 10:23]--[2014-03-16 Sun 10:46] =>  0:23

   * Q: Where are P29 and P30?  Seems like there are a bunch of gaps in these
     "ninety-nine" problems.

   * It took less than perhaps 20 minutes to write a naive is_prime
     (forgot to clock out), but it is too slow to be used on a prime
     bignum.

** transcribing remaining problems directly to files
   CLOCK: [2014-03-16 Sun 11:55]--[2014-03-16 Sun 11:58] =>  0:00
   CLOCK: [2014-03-16 Sun 11:51]--[2014-03-16 Sun 11:55] =>  0:04

** P32
   CLOCK: [2014-03-16 Sun 11:58]--[2014-03-16 Sun 12:05] =>  0:07

** P33
   CLOCK: [2014-03-16 Sun 12:05]--[2014-03-16 Sun 12:07] =>  0:02

** P34
   CLOCK: [2014-03-16 Sun 12:07]--[2014-03-16 Sun 12:17] =>  0:10

   * Not happy about my use of clone here.  But my brief attmepts to
     revise gcd and coprime to borrow insted of move made the code
     pretty ugly.

** P34, P36, P37
   CLOCK: [2014-03-16 Sun 12:55]--[2014-03-16 Sun 12:59] =>  0:04
   CLOCK: [2014-03-16 Sun 12:17]--[2014-03-16 Sun 12:52] =>  0:35

   * While puzzling over whether P37 exercise as described is buggy (since
     my manual calculation indicates that phi(10) == 4 but the improved
     algorithm yields phi(10) == 5), I also wondered whether there are
     other bugs lurking in my code, e.g. is my prime_factors going to
     ensure that all listed factors are in fact prime?  But in hindsight
     I think I am okay on this front.

   * Ah, http://www.christiankissig.de/cms/index.php/programming/217-99-problems-in-ocaml
     points out that even though the "official problems" show a sum here,
     it should be a product.

** P38
   CLOCK: [2014-03-16 Sun 13:00]--[2014-03-16 Sun 13:03] =>  0:03

   * The first explicit benchmarking problem; results below are without -O.

     test arithmetic::bench_P38::bench_totient_phi          ... bench:   9056144 ns/iter (+/- 202278)
     test arithmetic::bench_P38::bench_totient_phi_improved ... bench:     13957 ns/iter (+/- 414)

   * (For some reason, with -O I am getting 0 ns/iter (+/- 0) for bench_totient_phi.  Very strange.)

** P39
   CLOCK: [2014-03-16 Sun 18:09]--[2014-03-16 Sun 18:24] =>  0:15

   * Whoops, apparently I left a latent bug in is_prime, since it thinks 4 is prime,
     and that was only uncovered now.  (Clearly my claim that the naive implementation
     was "obviously correct" was itself a naive claim.)

   * I see, my loop condition was `while i < n/2 { ... }`, not `i <= n/2`.
     I think this implies that only 4 was mishandled here.  That's kind of
     interesting.

   * (Spent some time working out bug above and also investigating effects of `-O` flag
      on both compile time and benchmark results)

** P40
   CLOCK: [2014-03-16 Sun 18:30]--[2014-03-16 Sun 18:49] =>  0:19
   CLOCK: [2014-03-16 Sun 18:25]--[2014-03-16 Sun 18:27] =>  0:02

   * spent time playing around with goldbach; unfortunately, as I well
     know, my current is_prime function is too slow for this to work
     well on anything close to a bignum.

** P41
   CLOCK: [2014-03-16 Sun 18:49]--[2014-03-16 Sun 19:07] =>  0:18

* logic_and_codes.rs
** P46
   CLOCK: [2014-03-16 Sun 21:05]--[2014-03-16 Sun 21:06] =>  0:01
   CLOCK: [2014-03-16 Sun 20:44]--[2014-03-16 Sun 20:57] =>  0:13
   CLOCK: [2014-03-16 Sun 20:15]--[2014-03-16 Sun 20:27] =>  0:12
   CLOCK: [2014-03-16 Sun 19:27]--[2014-03-16 Sun 19:31] =>  0:04
   CLOCK: [2014-03-16 Sun 19:11]--[2014-03-16 Sun 19:13] =>  0:02

   * Some difficulty interpreting what this problem is asking for
     outside the context of Prolog (possibly perhaps the nature of
     that language may make it easy to conflate an enumerated
     data-type and a predicate), but from skimming over the O'Caml
     solution to this problem, it seems like my initial instinct to
     encode this as an enum was valid.

   * Got something building, but the transcribed test is failing,
     so I suspect I got some of the details wrong in the interpreter.
     Ah, I mistranscribed the example into the test, (once again).

** P47
   CLOCK: [2014-03-16 Sun 23:06]--[2014-03-16 Sun 23:22] =>  0:16

   * Yay operators

** P48
   CLOCK: [2014-03-16 Sun 23:48]--[2014-03-16 Sun 23:56] =>  0:08
   CLOCK: [2014-03-16 Sun 23:23]--[2014-03-16 Sun 23:48] =>  0:25

   * Lets see if I can have some fun with "overloading" on this one.

   * Refactoring existing code to overload took 25min

   * Transcribing the given test and mixing in ~[S] took 8min.
     (Most spent on the transcription since the order of my output
     differs from the example and I haven't felt like trying to
     recreate that level of fidelity.)
